// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: searcher.proto

package types

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SearcherService_SubscribeBundleResults_FullMethodName = "/searcher.SearcherService/SubscribeBundleResults"
	SearcherService_SubscribeMempool_FullMethodName       = "/searcher.SearcherService/SubscribeMempool"
	SearcherService_SendBundle_FullMethodName             = "/searcher.SearcherService/SendBundle"
	SearcherService_GetTipAddresses_FullMethodName        = "/searcher.SearcherService/GetTipAddresses"
)

// SearcherServiceClient is the client API for SearcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service definition for MEV searchers on the TON blockchain.
type SearcherServiceClient interface {
	// Subscribe to bundle results.
	SubscribeBundleResults(ctx context.Context, in *SubscribeBundleResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BundleResult], error)
	// Subscribe to mempool messages based on specific criteria.
	SubscribeMempool(ctx context.Context, in *MempoolSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MempoolPacket], error)
	// Send a bundle of messages.
	SendBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*SendBundleResponse, error)
	// Get the tip address for message inclusion.
	GetTipAddresses(ctx context.Context, in *GetTipAddressesRequest, opts ...grpc.CallOption) (*GetTipAddressesResponse, error)
}

type searcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearcherServiceClient(cc grpc.ClientConnInterface) SearcherServiceClient {
	return &searcherServiceClient{cc}
}

func (c *searcherServiceClient) SubscribeBundleResults(ctx context.Context, in *SubscribeBundleResultsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BundleResult], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearcherService_ServiceDesc.Streams[0], SearcherService_SubscribeBundleResults_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeBundleResultsRequest, BundleResult]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearcherService_SubscribeBundleResultsClient = grpc.ServerStreamingClient[BundleResult]

func (c *searcherServiceClient) SubscribeMempool(ctx context.Context, in *MempoolSubscription, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MempoolPacket], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SearcherService_ServiceDesc.Streams[1], SearcherService_SubscribeMempool_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MempoolSubscription, MempoolPacket]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearcherService_SubscribeMempoolClient = grpc.ServerStreamingClient[MempoolPacket]

func (c *searcherServiceClient) SendBundle(ctx context.Context, in *Bundle, opts ...grpc.CallOption) (*SendBundleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendBundleResponse)
	err := c.cc.Invoke(ctx, SearcherService_SendBundle_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searcherServiceClient) GetTipAddresses(ctx context.Context, in *GetTipAddressesRequest, opts ...grpc.CallOption) (*GetTipAddressesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTipAddressesResponse)
	err := c.cc.Invoke(ctx, SearcherService_GetTipAddresses_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearcherServiceServer is the server API for SearcherService service.
// All implementations must embed UnimplementedSearcherServiceServer
// for forward compatibility.
//
// Service definition for MEV searchers on the TON blockchain.
type SearcherServiceServer interface {
	// Subscribe to bundle results.
	SubscribeBundleResults(*SubscribeBundleResultsRequest, grpc.ServerStreamingServer[BundleResult]) error
	// Subscribe to mempool messages based on specific criteria.
	SubscribeMempool(*MempoolSubscription, grpc.ServerStreamingServer[MempoolPacket]) error
	// Send a bundle of messages.
	SendBundle(context.Context, *Bundle) (*SendBundleResponse, error)
	// Get the tip address for message inclusion.
	GetTipAddresses(context.Context, *GetTipAddressesRequest) (*GetTipAddressesResponse, error)
	mustEmbedUnimplementedSearcherServiceServer()
}

// UnimplementedSearcherServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSearcherServiceServer struct{}

func (UnimplementedSearcherServiceServer) SubscribeBundleResults(*SubscribeBundleResultsRequest, grpc.ServerStreamingServer[BundleResult]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBundleResults not implemented")
}
func (UnimplementedSearcherServiceServer) SubscribeMempool(*MempoolSubscription, grpc.ServerStreamingServer[MempoolPacket]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeMempool not implemented")
}
func (UnimplementedSearcherServiceServer) SendBundle(context.Context, *Bundle) (*SendBundleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBundle not implemented")
}
func (UnimplementedSearcherServiceServer) GetTipAddresses(context.Context, *GetTipAddressesRequest) (*GetTipAddressesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTipAddresses not implemented")
}
func (UnimplementedSearcherServiceServer) mustEmbedUnimplementedSearcherServiceServer() {}
func (UnimplementedSearcherServiceServer) testEmbeddedByValue()                         {}

// UnsafeSearcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SearcherServiceServer will
// result in compilation errors.
type UnsafeSearcherServiceServer interface {
	mustEmbedUnimplementedSearcherServiceServer()
}

func RegisterSearcherServiceServer(s grpc.ServiceRegistrar, srv SearcherServiceServer) {
	// If the following call pancis, it indicates UnimplementedSearcherServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SearcherService_ServiceDesc, srv)
}

func _SearcherService_SubscribeBundleResults_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeBundleResultsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearcherServiceServer).SubscribeBundleResults(m, &grpc.GenericServerStream[SubscribeBundleResultsRequest, BundleResult]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearcherService_SubscribeBundleResultsServer = grpc.ServerStreamingServer[BundleResult]

func _SearcherService_SubscribeMempool_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MempoolSubscription)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearcherServiceServer).SubscribeMempool(m, &grpc.GenericServerStream[MempoolSubscription, MempoolPacket]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SearcherService_SubscribeMempoolServer = grpc.ServerStreamingServer[MempoolPacket]

func _SearcherService_SendBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Bundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearcherServiceServer).SendBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearcherService_SendBundle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearcherServiceServer).SendBundle(ctx, req.(*Bundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearcherService_GetTipAddresses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTipAddressesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearcherServiceServer).GetTipAddresses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SearcherService_GetTipAddresses_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearcherServiceServer).GetTipAddresses(ctx, req.(*GetTipAddressesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SearcherService_ServiceDesc is the grpc.ServiceDesc for SearcherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SearcherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "searcher.SearcherService",
	HandlerType: (*SearcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBundle",
			Handler:    _SearcherService_SendBundle_Handler,
		},
		{
			MethodName: "GetTipAddresses",
			Handler:    _SearcherService_GetTipAddresses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeBundleResults",
			Handler:       _SearcherService_SubscribeBundleResults_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeMempool",
			Handler:       _SearcherService_SubscribeMempool_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "searcher.proto",
}
